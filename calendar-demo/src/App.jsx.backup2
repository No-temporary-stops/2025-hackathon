import React, { useState } from "react";
import { Calendar, momentLocalizer, Views } from "react-big-calendar";
import moment from "moment";
import "moment/locale/zh-tw";
import "react-big-calendar/lib/css/react-big-calendar.css";

moment.locale('zh-tw');
const localizer = momentLocalizer(moment);

const messages = {
  allDay: '全天',
  previous: '上一個',
  next: '下一個', 
  today: '今天',
  month: '月',
  week: '週',
  day: '日',
  agenda: '議程',
  date: '日期',
  time: '時間',
  event: '事件',
  noEventsInRange: '此時間範圍內沒有事件',
  showMore: total => `還有 ${total} 個事件`,
};

const MyCalendar = () => {
  const [events, setEvents] = useState([
    {
      title: "繳交數學作業",
      start: new Date(2025, 8, 20, 10, 0),
      end: new Date(2025, 8, 20, 12, 0),
    },
    {
      title: "行政繳費截止",
      start: new Date(2025, 8, 22, 23, 59),
      end: new Date(2025, 8, 22, 23, 59),
    },
    {
      title: "班親會",
      start: new Date(2025, 8, 25, 18, 30),
      end: new Date(2025, 8, 25, 20, 30),
    }
  ]);

  const [selectedEvent, setSelectedEvent] = useState(null);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [currentView, setCurrentView] = useState(Views.MONTH);
  const [showForm, setShowForm] = useState(false);
  const [newEvent, setNewEvent] = useState({
    title: "",
    start: "",
    end: "",
  });

  // 導航功能
  const handleNavigate = (newDate) => setCurrentDate(newDate);
  const handleViewChange = (view) => setCurrentView(view);
  const handleToday = () => setCurrentDate(new Date());

  // 時間格式化
  const formatDateTime = (date) => {
    if (!date) {
      const now = new Date();
      const offset = now.getTimezoneOffset() * 60000;
      return new Date(now.getTime() - offset).toISOString().slice(0, 16);
    }
    if (typeof date === 'string' && date.includes('T')) return date.slice(0, 16);
    const d = new Date(date);
    const offset = d.getTimezoneOffset() * 60000;
    return new Date(d.getTime() - offset).toISOString().slice(0, 16);
  };

  const getDefaultTimes = () => {
    const now = new Date();
    const start = new Date(now);
    start.setMinutes(0, 0, 0);
    const end = new Date(start);
    end.setHours(start.getHours() + 1);
    return {
      start: formatDateTime(start),
      end: formatDateTime(end)
    };
  };

  // 新增事件
  const handleAddEvent = (e) => {
    e.preventDefault();
    if (!newEvent.title || !newEvent.start || !newEvent.end) {
      alert("請完整輸入所有欄位！");
      return;
    }
    const startDate = new Date(newEvent.start);
    const endDate = new Date(newEvent.end);
    if (endDate <= startDate) {
      alert("結束時間必須晚於開始時間！");
      return;
    }
    setEvents([...events, {
      title: newEvent.title,
      start: startDate,
      end: endDate,
    }]);
    setNewEvent({ title: "", start: "", end: "" });
    setShowForm(false);
  };

  return (
    <div style={{ 
      minHeight: "100vh",
      background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
      fontFamily: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif",
      position: "relative"
    }}>
      {/* 頂部導航欄 */}
      <nav style={{
        backgroundColor: "rgba(255, 255, 255, 0.95)",
        backdropFilter: "blur(10px)",
        padding: "15px 0",
        position: "sticky",
        top: 0,
        zIndex: 1000,
        borderBottom: "1px solid rgba(0,0,0,0.1)"
      }}>
        <div style={{ maxWidth: "1400px", margin: "0 auto", padding: "0 20px" }}>
          <div style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center"
          }}>
            <div style={{ display: "flex", alignItems: "center", gap: "15px" }}>
              <h1 style={{ 
                margin: 0, 
                fontSize: "24px", 
                fontWeight: "700", 
                color: "#2d3748",
                background: "linear-gradient(135deg, #667eea, #764ba2)",
                WebkitBackgroundClip: "text",
                WebkitTextFillColor: "transparent"
              }}>
                📅 校園智慧日曆系統
              </h1>
              <span style={{
                fontSize: "12px",
                color: "#666",
                backgroundColor: "#f0f0f0",
                padding: "4px 8px",
                borderRadius: "12px"
              }}>
                梅竹黑客松 Demo
              </span>
            </div>
            <button
              onClick={() => {
                if (!showForm) {
                  const defaults = getDefaultTimes();
                  setNewEvent({ title: "", start: defaults.start, end: defaults.end });
                }
                setShowForm(!showForm);
              }}
              style={{
                padding: "10px 20px",
                background: showForm ? "linear-gradient(135deg, #e53e3e, #ff6b6b)" : "linear-gradient(135deg, #4299e1, #667eea)",
                color: "white",
                border: "none",
                borderRadius: "25px",
                cursor: "pointer",
                fontSize: "14px",
                fontWeight: "600",
                boxShadow: "0 4px 15px rgba(0,0,0,0.2)",
                transition: "all 0.3s ease"
              }}
            >
              {showForm ? "✕ 取消新增" : "➕ 新增事件"}
            </button>
          </div>
        </div>
      </nav>

      <div style={{ maxWidth: "1400px", margin: "0 auto", padding: "30px 20px" }}>
        
        {/* 控制面板 */}
        <div style={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          marginBottom: "25px",
          padding: "20px 25px",
          backgroundColor: "rgba(255, 255, 255, 0.95)",
          backdropFilter: "blur(10px)",
          borderRadius: "20px",
          boxShadow: "0 8px 25px rgba(0,0,0,0.15)",
          border: "1px solid rgba(255,255,255,0.2)"
        }}>
          <div style={{ display: "flex", alignItems: "center", gap: "15px" }}>
            <button onClick={handleToday} style={{
              padding: "10px 18px", 
              background: "linear-gradient(135deg, #48bb78, #38a169)", 
              color: "white",
              border: "none", 
              borderRadius: "25px", 
              cursor: "pointer", 
              fontSize: "14px",
              fontWeight: "500",
              boxShadow: "0 4px 12px rgba(72, 187, 120, 0.3)",
              transition: "all 0.3s ease"
            }}>📍 今天</button>
            
            <div style={{ display: "flex", gap: "8px" }}>
              <button onClick={() => handleNavigate(moment(currentDate).subtract(1, currentView).toDate())} style={{
                padding: "8px 12px", 
                background: "linear-gradient(135deg, #718096, #4a5568)", 
                color: "white",
                border: "none", 
                borderRadius: "50%", 
                cursor: "pointer", 
                fontSize: "16px",
                width: "40px",
                height: "40px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                boxShadow: "0 4px 12px rgba(113, 128, 150, 0.3)"
              }}>←</button>
              
              <button onClick={() => handleNavigate(moment(currentDate).add(1, currentView).toDate())} style={{
                padding: "8px 12px", 
                background: "linear-gradient(135deg, #718096, #4a5568)", 
                color: "white",
                border: "none", 
                borderRadius: "50%", 
                cursor: "pointer", 
                fontSize: "16px",
                width: "40px",
                height: "40px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                boxShadow: "0 4px 12px rgba(113, 128, 150, 0.3)"
              }}>→</button>
            </div>
          </div>
          
          <div style={{ 
            fontSize: "22px", 
            fontWeight: "700", 
            color: "#2d3748",
            textAlign: "center",
            padding: "8px 20px",
            background: "rgba(102, 126, 234, 0.1)",
            borderRadius: "15px"
          }}>
            {moment(currentDate).format('YYYY年MM月')}
          </div>
          
          <div style={{ display: "flex", gap: "8px" }}>
            {[Views.MONTH, Views.WEEK, Views.DAY, Views.AGENDA].map((view) => (
              <button 
                key={view} 
                onClick={() => handleViewChange(view)} 
                style={{
                  padding: "8px 16px",
                  background: currentView === view ? "linear-gradient(135deg, #4299e1, #667eea)" : "rgba(247, 250, 252, 0.8)",
                  color: currentView === view ? "white" : "#4a5568",
                  border: currentView === view ? "none" : "1px solid rgba(226, 232, 240, 0.8)",
                  borderRadius: "20px",
                  cursor: "pointer",
                  fontSize: "13px",
                  fontWeight: "500",
                  boxShadow: currentView === view ? "0 4px 15px rgba(66, 153, 225, 0.4)" : "none",
                  transition: "all 0.3s ease"
                }}
              >
                {view === Views.MONTH && '📅 月視圖'}
                {view === Views.WEEK && '📆 週視圖'}
                {view === Views.DAY && '📋 日視圖'}
                {view === Views.AGENDA && '📝 議程'}
              </button>
            ))}
          </div>
        </div>

        {/* 主要內容區 */}
        <div style={{
          display: "grid",
          gridTemplateColumns: showForm || selectedEvent ? "2fr 1fr" : "1fr",
          gap: "25px",
          alignItems: "start"
        }}>
          {/* 日曆主體 */}
          <div style={{
            backgroundColor: "rgba(255, 255, 255, 0.95)",
            backdropFilter: "blur(10px)",
            borderRadius: "20px",
            padding: "25px",
            boxShadow: "0 10px 30px rgba(0,0,0,0.15)",
            border: "1px solid rgba(255,255,255,0.2)",
            minHeight: "600px"
          }}>
            <Calendar
              localizer={localizer}
              events={events}
              startAccessor="start"
              endAccessor="end"
              style={{ height: 550 }}
              messages={messages}
              date={currentDate}
              view={currentView}
              onNavigate={handleNavigate}
              onView={handleViewChange}
              onSelectEvent={setSelectedEvent}
              toolbar={false}
              popup
              eventPropGetter={() => ({
                style: {
                  background: "linear-gradient(135deg, #4299e1, #667eea)",
                  border: "none",
                  borderRadius: "8px",
                  color: "white",
                  fontSize: "12px",
                  fontWeight: "500",
                  boxShadow: "0 2px 8px rgba(66, 153, 225, 0.3)"
                }
              })}
            />
          </div>

        {/* 事件詳情 */}
        {selectedEvent && (
          <div style={{
            padding: "20px",
            backgroundColor: "white",
            borderRadius: "12px",
            boxShadow: "0 2px 8px rgba(0,0,0,0.1)",
            marginBottom: "20px",
            border: "2px solid #4299e1"
          }}>
            <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: "15px" }}>
              <h3 style={{ margin: 0, color: "#4299e1", fontSize: "18px" }}>📌 事件詳情</h3>
              <button onClick={() => setSelectedEvent(null)} style={{
                padding: "6px 10px", 
                backgroundColor: "#e53e3e", 
                color: "white",
                border: "none", 
                borderRadius: "4px", 
                cursor: "pointer", 
                fontSize: "12px"
              }}>✕</button>
            </div>
            <div style={{ fontSize: "14px", lineHeight: "1.5" }}>
              <p style={{ margin: "5px 0" }}><strong>標題：</strong> {selectedEvent.title}</p>
              <p style={{ margin: "5px 0" }}><strong>開始：</strong> {moment(selectedEvent.start).format('YYYY年MM月DD日 HH:mm')}</p>
              <p style={{ margin: "5px 0" }}><strong>結束：</strong> {moment(selectedEvent.end).format('YYYY年MM月DD日 HH:mm')}</p>
              <p style={{ margin: "5px 0" }}><strong>時長：</strong> {moment.duration(moment(selectedEvent.end).diff(moment(selectedEvent.start))).humanize()}</p>
            </div>
          </div>
        )}

        {/* 新增表單 */}
        {showForm && (
          <div style={{
            padding: "20px",
            backgroundColor: "white",
            borderRadius: "12px",
            boxShadow: "0 2px 8px rgba(0,0,0,0.1)"
          }}>
            <h3 style={{ margin: "0 0 15px 0", fontSize: "18px", color: "#2d3748" }}>➕ 新增事件</h3>
            <form onSubmit={handleAddEvent}>
              <div style={{ marginBottom: "15px" }}>
                <label style={{ display: "block", marginBottom: "5px", fontSize: "14px", fontWeight: "500" }}>
                  事件標題 *
                </label>
                <input
                  type="text"
                  placeholder="例：繳交數學作業"
                  value={newEvent.title}
                  onChange={(e) => setNewEvent({ ...newEvent, title: e.target.value })}
                  style={{
                    width: "100%",
                    padding: "10px",
                    border: "1px solid #e2e8f0",
                    borderRadius: "6px",
                    fontSize: "14px",
                    boxSizing: "border-box"
                  }}
                  required
                />
              </div>
              
              <div style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: "15px", marginBottom: "15px" }}>
                <div>
                  <label style={{ display: "block", marginBottom: "5px", fontSize: "14px", fontWeight: "500" }}>
                    開始時間 *
                  </label>
                  <input
                    type="datetime-local"
                    value={newEvent.start}
                    onChange={(e) => setNewEvent({ ...newEvent, start: e.target.value })}
                    style={{
                      width: "100%",
                      padding: "10px",
                      border: "1px solid #e2e8f0",
                      borderRadius: "6px",
                      fontSize: "14px",
                      boxSizing: "border-box"
                    }}
                    required
                  />
                </div>
                
                <div>
                  <label style={{ display: "block", marginBottom: "5px", fontSize: "14px", fontWeight: "500" }}>
                    結束時間 *
                  </label>
                  <input
                    type="datetime-local"
                    value={newEvent.end}
                    onChange={(e) => setNewEvent({ ...newEvent, end: e.target.value })}
                    style={{
                      width: "100%",
                      padding: "10px",
                      border: "1px solid #e2e8f0",
                      borderRadius: "6px",
                      fontSize: "14px",
                      boxSizing: "border-box"
                    }}
                    required
                  />
                </div>
              </div>
              
              <div style={{ display: "flex", gap: "10px" }}>
                <button type="submit" style={{
                  padding: "10px 20px", 
                  backgroundColor: "#48bb78", 
                  color: "white",
                  border: "none", 
                  borderRadius: "6px", 
                  cursor: "pointer", 
                  fontSize: "14px"
                }}>確認新增</button>
                
                <button type="button" onClick={() => {
                  setShowForm(false);
                  setNewEvent({ title: "", start: "", end: "" });
                }} style={{
                  padding: "10px 20px", 
                  backgroundColor: "#718096", 
                  color: "white",
                  border: "none", 
                  borderRadius: "6px", 
                  cursor: "pointer", 
                  fontSize: "14px"
                }}>取消</button>
              </div>
            </form>
          </div>
        )}
      </div>
    </div>
  );
};

export default MyCalendar;
